@* @page "/Modules/Create" *@
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<EditForm EditContext="@_editContext">
	@* Model="createModule" *@
	@*     <DataAnnotationsValidator />
    <ValidationSummary /> *@
	<MudGrid>
		<MudItem md="12">
			<MudPaper Class="pa-4 pb-8 " Outlined="true">
				<MudGrid>
					<MudItem md="12" Style="width:100%">
						<MudSelect T="Guid"
								   @bind-Value="createModule.ApplicationId"
								   For="@(() => createModule.ApplicationId)"
								   Label="Application"
								   Placeholder="Please Select an Application"
								   Dense="true"
								   Modal="true"
								   SelectedValuesChanged="() => ClearValidationMessage(nameof(createModule.ApplicationId))">

							<MudSelectItem Value="Guid.Empty">&nbsp;</MudSelectItem>
							@foreach (var application in ListOfApplications.OrderBy(s => s.Name))
							{
								<MudSelectItem Value="@application.Id">@application.Name</MudSelectItem>
							}
						</MudSelect>
					</MudItem>

					<MudItem md="12" Style="width:100%">
						<MudTextField Label="Name"
									  Variant="Variant.Text"
									  InputType="InputType.Text"
									  For="@(() => createModule.Name)"
									  @bind-Value="createModule.Name"
									  TextChanged="() => ClearValidationMessage(nameof(createModule.Name))" />
					</MudItem>

					<MudItem md="12" Style="width:100%">
						<MudTextField T="string" MaxLines=3 Lines=3 Label="Description"
									  Variant="Variant.Text"
									  InputType="InputType.Text"
									  For="@(() => createModule.Description)"
									  @bind-Value="createModule.Description"
									  TextChanged="() => ClearValidationMessage(nameof(createModule.Description))" />
					</MudItem>

					<MudItem md="6" Style="width:100%">
						<MudTextField Label="Abbreviation"
									  Variant="Variant.Text"
									  InputType="InputType.Text"
									  For="@(() => createModule.Abbreviation)"
									  @bind-Value="createModule.Abbreviation"
									  TextChanged="() => ClearValidationMessage(nameof(createModule.Abbreviation))" />
					</MudItem>
					<MudItem md="6" Style="width:100%">
						<MudTextField Label="Friendly Id"
									  Variant="Variant.Text"
									  InputType="InputType.Text"
									  For="@(() => createModule.FriendlyId)"
									  @bind-Value="createModule.FriendlyId"
									  TextChanged="() => ClearValidationMessage(nameof(createModule.FriendlyId))" />
					</MudItem>

					<MudItem md="12" Style="width:100%">
						<MudTextField Label="Icon Url"
									  Variant="Variant.Text"
									  InputType="InputType.Url"
									  For="@(() => createModule.IconUrl)"
									  @bind-Value="createModule.IconUrl"
									  TextChanged="() => ClearValidationMessage(nameof(createModule.IconUrl))" />
					</MudItem>
				</MudGrid>
			</MudPaper>
		</MudItem>
		<MudItem md="12" Style="text-align:right">

			<MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="HandleCancelAsync">Cancel</MudButton>

			<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSubmitAsync">Save</MudButton>

		</MudItem>


		@if (!string.IsNullOrEmpty(_error))
		{
			<MudItem md="12">
				<div class="alert alert-danger alert-dismissible fade show mt-2 mb-0" role="alert">
					<strong>Hey, an error happened!</strong>
					@_error
					<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
				</div>
			</MudItem>
		}


	</MudGrid>

</EditForm>
