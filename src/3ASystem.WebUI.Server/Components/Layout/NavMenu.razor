@implements IDisposable

@inject NavigationManager NavigationManager

<MudNavMenu>
	<MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>

	<MudNavLink Href="applications" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.ViewList">Applications</MudNavLink>
	<MudNavLink Href="modules" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.FormatListBulleted">Modules</MudNavLink>
	<MudNavLink Href="Account/Register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">New User</MudNavLink>

	<MudDivider Class="my-3" />

	<AuthorizeView>
		<Authorized>
			<MudNavLink Href="Account/Manage" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</MudNavLink>
			<MudDivider Class="my-3" />
			<form action="Account/Logout" method="post">
				<AntiforgeryToken />
				<input type="hidden" name="ReturnUrl" value="@currentUrl" />
				<button type="submit" class="mud-nav-link mud-ripple">
					<MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Info" Class="mr-3"></MudIcon> Logout
				</button>
			</form>
		</Authorized>

		<NotAuthorized>
			<MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Password">Login</MudNavLink>
		</NotAuthorized>
	</AuthorizeView>
</MudNavMenu>


@code {
	private string? currentUrl;

	protected override void OnInitialized()
	{
		currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
		NavigationManager.LocationChanged += OnLocationChanged;
	}

	private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
		StateHasChanged();
	}

	public void Dispose()
	{
		NavigationManager.LocationChanged -= OnLocationChanged;
	}
}

